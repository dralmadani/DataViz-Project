(function (React$1, ReactDOM, d3, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';

  const useWorldAtlas = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3.json(jsonUrl).then(topology => {
        const { countries, land } = topology.objects;
        setData({
          land: topojson.feature(topology, land),
          interiors: topojson.mesh(topology, countries, (a, b) => a !== b)
        });
      });
    }, []);

    return data;
  };

  const csvUrl ='https://gist.githubusercontent.com/dralmadani/aa84bd8088038464b94ef3c454b30f4d/raw/Cities_Ranked_by_Number_of_Completed_Structures.csv';
  const row = (d) => {
    d.lat = +d.lat;
    d.lng = +d.lng;
   // d.population = +d.AllBuilding;
    d.AllBuilding = +d.AllBuilding;
    

    d.TelecomTowers = +d.TelecomTowers;
    d['100m'] = +d['100m'];
    d['150m'] = +d['150m'];
    d['200m'] = +d['200m'];
    d['300m'] = +d['300m'];
    d.Rank = +d.Rank;
    d.AllStructures = +d.AllStructures;
    //d['Reported Date'] = new Date(d['first150m']);
   // d.first150m = new Date(d['first150m']);
      d.first150m = new Date(d.first150m,0);
          //d.Year = new Date(d.Year, 0);


    //d.first150m = new Date(d['first150m']);
    d['Reported Date'] = new Date(d.first150m);

    
    return d;
  };

  const useCities = () => {
    const [data, setData] = React$1.useState(null);
  //console.log(data);

    React$1.useEffect(() => {
      d3.csv(csvUrl, row).then((data) =>
        setData(data.sort((a, b) => d3.descending(a.lat, b.lat)))
      );
    }, []);

    return data;
  };
  //console.log(data);

  const siFormat = d3.format('.3~s');

  const projection = d3.geoNaturalEarth1();
  const path = d3.geoPath(projection);
  const graticule = d3.geoGraticule();

  const mountainWidth = 8;

  const Marks = ({
    worldAtlas: { land, interiors },
    data,
    heightScale,
    heightValue,
    colorScale,
    colorValue,
  }) => (
    React.createElement( 'g', { className: "marks" },
      React$1.useMemo(() =>(
                React.createElement( React.Fragment, null,
      React.createElement( 'path', { className: "sphere", d: path({ type: 'Sphere' }) }),
      React.createElement( 'path', { className: "graticules", d: path(graticule()) }),
      land.features.map((feature) => (
        React.createElement( 'path', { className: "land", d: path(feature) })
      )),
      React.createElement( 'path', { className: "interiors", d: path(interiors) })
        )
          ), [path,graticule,land,interiors]), "; ", React.createElement( 'g', { class: "mountains" },
        data.map((d) => {
          const [x, y] = projection([d.lng, d.lat]);
          const mountainHeight = heightScale(heightValue(d));
          const x1 = x - mountainWidth / 2;
          const x2 = x;
          const x3 = x + mountainWidth / 2;
          const y1 = y;
          const y2 = y - mountainHeight;
          const y3 = y;
          return (
            React.createElement( 'path', { d: `M ${x1} ${y1} L ${x2} ${y2} L ${x3} ${y3}`, title: "test", fill: colorScale(colorValue(d)) },
              React.createElement( 'title', null,
                d.city, ", ", d.country, " ", '\nTotal: ', (d.AllBuilding)
              )
            )
          );
        })
      )
    )
  );

  const heightValue = (d) => d.AllBuilding;
  const maxHeight = 120;

  const colorValue = (d) => d.Rank;

  const BubbleMap = ({
    data,
    filteredData,
    worldAtlas,
    //heightValue,
    //colorValue,
    //maxHeight,
  }) => {
    const heightScale = React$1.useMemo(
      () =>
        d3.scaleLinear()
          .domain([0, d3.max(data, heightValue)])
          .range([0, maxHeight]),
      [data, heightValue, maxHeight]
    );

    const colorScale = React$1.useMemo(
      () => d3.scaleOrdinal().domain(data.map(colorValue)),
      [data, colorValue]
    );
    const colorValues = colorScale.domain();
    colorScale.range(
      colorValues.map((value, i) => d3.hcl((i / colorValues.length) * 360, 50, 70))
    );

    return (
      React$1__default.createElement( Marks, {
        worldAtlas: worldAtlas, data: filteredData, heightScale: heightScale, heightValue: heightValue, colorScale: colorScale, colorValue: colorValue })
    );
  };

  const AxisBottom = ({ xScale, innerHeight, tickFormat, tickOffset = 3 }) =>
    xScale.ticks().map(tickValue => (
      React.createElement( 'g', {
        className: "tick", key: tickValue, transform: `translate(${xScale(tickValue)},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', { style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + tickOffset },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({ yScale, innerWidth, tickOffset = 3 }) =>
    yScale.ticks().map(tickValue => (
      React.createElement( 'g', { className: "tick", transform: `translate(0,${yScale(tickValue)})` },
        React.createElement( 'line', { x2: innerWidth }),
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -tickOffset, dy: ".32em" },
          tickValue
        )
      )
    ));

  const Marks$1 = ({
    binnedData,
    xScale,
    yScale,
    tooltipFormat,
    innerHeight,
  }) =>
    binnedData.map((d) => (
      React.createElement( 'rect', {
        className: "mark", x: xScale(d.x0), y: yScale(d.y), width: xScale(d.x1) - xScale(d.x0), height: innerHeight - yScale(d.y) },
        React.createElement( 'title', null, tooltipFormat(d.y) )
      )
    ));

  const margin = { top: 0, right: 50, bottom: 20, left: 60 };
  const xAxisLabelOffset = 54;
  const yAxisLabelOffset = 30;

  const xAxisTickFormat = d3.timeFormat('%Y');
  const yValue = (d) => d['AllBuilding'];

    const xAxisLabel = 'First Building greater than 150m+';
    const yAxisLabel = 'Number of building';


  const DateHistogram = ({
    data,
    height,
    width,
    setBrushExtent,
    xValue,
  }) => {

    const innerHeight = height - margin.top - margin.bottom;
    const innerWidth = width - margin.left - margin.right;


    const xScale = React$1.useMemo(
      () =>
        d3.scaleTime().domain(d3.extent(data, xValue)).range([0, innerWidth]).nice(),
      [data, xValue, innerWidth]
    );

    const binnedData = React$1.useMemo( 
      () => {
      const [start, stop] = xScale.domain();
      return d3.histogram()
          .value(xValue)
          .domain(xScale.domain())
  //        .thresholds(timeMonths(start, stop))(data)
          .thresholds(d3.timeYears(start, stop))(data)
          .map((array) => ({
            y: d3.sum(array, yValue),
            x0: array.x0,
            x1: array.x1,
          }));
    },
        [xValue,yValue, xScale, data]
      
    );

    const yScale = React$1.useMemo (() => d3.scaleLinear()
      .domain([0, d3.max(binnedData, (d) => d.y)])
      .range([innerHeight, 0]), [binnedData,innerHeight]);

    const brushRef = React$1.useRef();

    React$1.useEffect(() => {
      const brush = d3.brushX().extent([
        [0, 0],
        [innerWidth, innerHeight],
      ]);

      brush(d3.select(brushRef.current));
      brush.on('brush end', () => {
        setBrushExtent(d3.event.selection && d3.event.selection.map(xScale.invert));
      });
    }, [innerWidth, innerHeight]);

    return (
      React.createElement( React.Fragment, null,
        React.createElement( 'rect', { width: width, height: height, fill: "white" }),
        React.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
          React.createElement( AxisBottom, {
            xScale: xScale, innerHeight: innerHeight, tickFormat: xAxisTickFormat, tickOffset: 8 }),
          React.createElement( 'text', {
            className: "axis-label", textAnchor: "middle", transform: `translate(${-yAxisLabelOffset},${
            innerHeight / 2
          }) rotate(-90)` },
            yAxisLabel
          ),
          React.createElement( AxisLeft, { yScale: yScale, innerWidth: innerWidth, tickOffset: 5 }),
          React.createElement( 'text', {
            className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" },
            xAxisLabel
          ),

          React.createElement( Marks$1, {
            binnedData: binnedData, xScale: xScale, yScale: yScale, tooltipFormat: (d) => d, circleRadius: 2, innerHeight: innerHeight }),
          React.createElement( 'g', { ref: brushRef })
        )
      )
    );
  };

  const width = 960;
  const height = 500;
  const dateHistogramSize = 0.2;
    const xValue = (d) => d.first150m; //d['100m'];


  //const heightValue = (d) => d.AllBuilding;
  //const maxHeight = 120;

  //const colorValue = (d) => d.Rank;

  const App = () => {
    const worldAtlas = useWorldAtlas();
    const data = useCities();
    const [brushExtent,setBrushExtent] = React$1.useState();
    

    if (!worldAtlas || !data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }
    
    const filteredData = brushExtent ? data.filter(d => {
      const date = xValue(d);
      return date > brushExtent[0] && date < brushExtent[1];
    }): data;

    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( BubbleMap, {
          worldAtlas: worldAtlas, data: data, filteredData: filteredData }),
        React$1__default.createElement( 'g', { transform: `translate(0,${height - dateHistogramSize * height})` },
          React$1__default.createElement( DateHistogram, {
            data: data, height: dateHistogramSize * height, width: width, setBrushExtent: setBrushExtent, xValue: xValue })
        )
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,